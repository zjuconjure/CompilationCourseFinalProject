// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 22 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | COLON
  | QUESTION
  | BITAND
  | BITOR
  | BITXOR
  | BITLEFT
  | BITRIGHT
  | BITNOT
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | DOPLUS
  | DOMINUS
  | PLUSASSIGN
  | MINUSASSIGN
  | MULTIASSIGN
  | DIVIDEASSIGN
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | FOR
  | SWITCH
  | CASE
  | DEFAULT
  | MAX
  | MIN
  | ABS
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_QUESTION
    | TOKEN_BITAND
    | TOKEN_BITOR
    | TOKEN_BITXOR
    | TOKEN_BITLEFT
    | TOKEN_BITRIGHT
    | TOKEN_BITNOT
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_DOPLUS
    | TOKEN_DOMINUS
    | TOKEN_PLUSASSIGN
    | TOKEN_MINUSASSIGN
    | TOKEN_MULTIASSIGN
    | TOKEN_DIVIDEASSIGN
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFAULT
    | TOKEN_MAX
    | TOKEN_MIN
    | TOKEN_ABS
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_Caselist
    | NONTERM_Casedec
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | COLON  -> 11 
  | QUESTION  -> 12 
  | BITAND  -> 13 
  | BITOR  -> 14 
  | BITXOR  -> 15 
  | BITLEFT  -> 16 
  | BITRIGHT  -> 17 
  | BITNOT  -> 18 
  | NOT  -> 19 
  | SEQOR  -> 20 
  | SEQAND  -> 21 
  | EQ  -> 22 
  | NE  -> 23 
  | GT  -> 24 
  | LT  -> 25 
  | GE  -> 26 
  | LE  -> 27 
  | PLUS  -> 28 
  | MINUS  -> 29 
  | TIMES  -> 30 
  | DIV  -> 31 
  | MOD  -> 32 
  | DOPLUS  -> 33 
  | DOMINUS  -> 34 
  | PLUSASSIGN  -> 35 
  | MINUSASSIGN  -> 36 
  | MULTIASSIGN  -> 37 
  | DIVIDEASSIGN  -> 38 
  | CHAR  -> 39 
  | ELSE  -> 40 
  | IF  -> 41 
  | INT  -> 42 
  | NULL  -> 43 
  | PRINT  -> 44 
  | PRINTLN  -> 45 
  | RETURN  -> 46 
  | VOID  -> 47 
  | WHILE  -> 48 
  | FOR  -> 49 
  | SWITCH  -> 50 
  | CASE  -> 51 
  | DEFAULT  -> 52 
  | MAX  -> 53 
  | MIN  -> 54 
  | ABS  -> 55 
  | CSTSTRING _ -> 56 
  | NAME _ -> 57 
  | CSTINT _ -> 58 
  | CSTBOOL _ -> 59 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_QUESTION 
  | 13 -> TOKEN_BITAND 
  | 14 -> TOKEN_BITOR 
  | 15 -> TOKEN_BITXOR 
  | 16 -> TOKEN_BITLEFT 
  | 17 -> TOKEN_BITRIGHT 
  | 18 -> TOKEN_BITNOT 
  | 19 -> TOKEN_NOT 
  | 20 -> TOKEN_SEQOR 
  | 21 -> TOKEN_SEQAND 
  | 22 -> TOKEN_EQ 
  | 23 -> TOKEN_NE 
  | 24 -> TOKEN_GT 
  | 25 -> TOKEN_LT 
  | 26 -> TOKEN_GE 
  | 27 -> TOKEN_LE 
  | 28 -> TOKEN_PLUS 
  | 29 -> TOKEN_MINUS 
  | 30 -> TOKEN_TIMES 
  | 31 -> TOKEN_DIV 
  | 32 -> TOKEN_MOD 
  | 33 -> TOKEN_DOPLUS 
  | 34 -> TOKEN_DOMINUS 
  | 35 -> TOKEN_PLUSASSIGN 
  | 36 -> TOKEN_MINUSASSIGN 
  | 37 -> TOKEN_MULTIASSIGN 
  | 38 -> TOKEN_DIVIDEASSIGN 
  | 39 -> TOKEN_CHAR 
  | 40 -> TOKEN_ELSE 
  | 41 -> TOKEN_IF 
  | 42 -> TOKEN_INT 
  | 43 -> TOKEN_NULL 
  | 44 -> TOKEN_PRINT 
  | 45 -> TOKEN_PRINTLN 
  | 46 -> TOKEN_RETURN 
  | 47 -> TOKEN_VOID 
  | 48 -> TOKEN_WHILE 
  | 49 -> TOKEN_FOR 
  | 50 -> TOKEN_SWITCH 
  | 51 -> TOKEN_CASE 
  | 52 -> TOKEN_DEFAULT 
  | 53 -> TOKEN_MAX 
  | 54 -> TOKEN_MIN 
  | 55 -> TOKEN_ABS 
  | 56 -> TOKEN_CSTSTRING 
  | 57 -> TOKEN_NAME 
  | 58 -> TOKEN_CSTINT 
  | 59 -> TOKEN_CSTBOOL 
  | 62 -> TOKEN_end_of_input
  | 60 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_Caselist 
    | 34 -> NONTERM_Caselist 
    | 35 -> NONTERM_Casedec 
    | 36 -> NONTERM_StmtU 
    | 37 -> NONTERM_StmtU 
    | 38 -> NONTERM_StmtU 
    | 39 -> NONTERM_StmtU 
    | 40 -> NONTERM_StmtU 
    | 41 -> NONTERM_StmtU 
    | 42 -> NONTERM_Expr 
    | 43 -> NONTERM_Expr 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_ExprNotAccess 
    | 66 -> NONTERM_ExprNotAccess 
    | 67 -> NONTERM_ExprNotAccess 
    | 68 -> NONTERM_ExprNotAccess 
    | 69 -> NONTERM_ExprNotAccess 
    | 70 -> NONTERM_ExprNotAccess 
    | 71 -> NONTERM_ExprNotAccess 
    | 72 -> NONTERM_ExprNotAccess 
    | 73 -> NONTERM_ExprNotAccess 
    | 74 -> NONTERM_ExprNotAccess 
    | 75 -> NONTERM_ExprNotAccess 
    | 76 -> NONTERM_ExprNotAccess 
    | 77 -> NONTERM_ExprNotAccess 
    | 78 -> NONTERM_ExprNotAccess 
    | 79 -> NONTERM_ExprNotAccess 
    | 80 -> NONTERM_ExprNotAccess 
    | 81 -> NONTERM_AtExprNotAccess 
    | 82 -> NONTERM_AtExprNotAccess 
    | 83 -> NONTERM_AtExprNotAccess 
    | 84 -> NONTERM_Access 
    | 85 -> NONTERM_Access 
    | 86 -> NONTERM_Access 
    | 87 -> NONTERM_Access 
    | 88 -> NONTERM_Access 
    | 89 -> NONTERM_Exprs 
    | 90 -> NONTERM_Exprs 
    | 91 -> NONTERM_Exprs1 
    | 92 -> NONTERM_Exprs1 
    | 93 -> NONTERM_Const 
    | 94 -> NONTERM_Const 
    | 95 -> NONTERM_Const 
    | 96 -> NONTERM_Const 
    | 97 -> NONTERM_Type 
    | 98 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 62 
let _fsyacc_tagOfErrorTerminal = 60

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | COLON  -> "COLON" 
  | QUESTION  -> "QUESTION" 
  | BITAND  -> "BITAND" 
  | BITOR  -> "BITOR" 
  | BITXOR  -> "BITXOR" 
  | BITLEFT  -> "BITLEFT" 
  | BITRIGHT  -> "BITRIGHT" 
  | BITNOT  -> "BITNOT" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | DOPLUS  -> "DOPLUS" 
  | DOMINUS  -> "DOMINUS" 
  | PLUSASSIGN  -> "PLUSASSIGN" 
  | MINUSASSIGN  -> "MINUSASSIGN" 
  | MULTIASSIGN  -> "MULTIASSIGN" 
  | DIVIDEASSIGN  -> "DIVIDEASSIGN" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | DEFAULT  -> "DEFAULT" 
  | MAX  -> "MAX" 
  | MIN  -> "MIN" 
  | ABS  -> "ABS" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | BITAND  -> (null : System.Object) 
  | BITOR  -> (null : System.Object) 
  | BITXOR  -> (null : System.Object) 
  | BITLEFT  -> (null : System.Object) 
  | BITRIGHT  -> (null : System.Object) 
  | BITNOT  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | DOPLUS  -> (null : System.Object) 
  | DOMINUS  -> (null : System.Object) 
  | PLUSASSIGN  -> (null : System.Object) 
  | MINUSASSIGN  -> (null : System.Object) 
  | MULTIASSIGN  -> (null : System.Object) 
  | DIVIDEASSIGN  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | MAX  -> (null : System.Object) 
  | MIN  -> (null : System.Object) 
  | ABS  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 11us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 73us; 54us; 83us; 54us; 91us; 92us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 95us; 8us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 73us; 74us; 83us; 84us; 2us; 65535us; 79us; 80us; 87us; 88us; 2us; 65535us; 79us; 87us; 87us; 87us; 8us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 94us; 64us; 96us; 73us; 97us; 83us; 98us; 52us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 48us; 76us; 77us; 83us; 48us; 106us; 107us; 109us; 149us; 112us; 113us; 114us; 115us; 150us; 117us; 151us; 118us; 152us; 119us; 153us; 120us; 154us; 121us; 155us; 122us; 156us; 123us; 157us; 124us; 158us; 125us; 159us; 126us; 160us; 127us; 161us; 128us; 162us; 129us; 169us; 130us; 170us; 131us; 171us; 132us; 172us; 133us; 173us; 134us; 174us; 135us; 175us; 136us; 176us; 137us; 177us; 138us; 178us; 139us; 179us; 141us; 180us; 142us; 182us; 143us; 183us; 144us; 186us; 145us; 187us; 146us; 190us; 147us; 193us; 140us; 204us; 148us; 207us; 149us; 52us; 65535us; 37us; 103us; 40us; 103us; 43us; 103us; 50us; 103us; 56us; 103us; 58us; 103us; 59us; 103us; 62us; 103us; 64us; 103us; 67us; 103us; 69us; 103us; 71us; 103us; 73us; 103us; 76us; 103us; 83us; 103us; 106us; 103us; 109us; 103us; 112us; 103us; 114us; 103us; 150us; 103us; 151us; 103us; 152us; 103us; 153us; 103us; 154us; 103us; 155us; 103us; 156us; 103us; 157us; 103us; 158us; 103us; 159us; 103us; 160us; 103us; 161us; 103us; 162us; 103us; 169us; 103us; 170us; 103us; 171us; 103us; 172us; 103us; 173us; 103us; 174us; 103us; 175us; 103us; 176us; 103us; 177us; 103us; 178us; 103us; 179us; 103us; 180us; 103us; 182us; 103us; 183us; 103us; 186us; 103us; 187us; 103us; 190us; 103us; 193us; 104us; 204us; 103us; 207us; 103us; 53us; 65535us; 37us; 105us; 40us; 105us; 43us; 105us; 50us; 105us; 56us; 105us; 58us; 105us; 59us; 105us; 62us; 105us; 64us; 105us; 67us; 105us; 69us; 105us; 71us; 105us; 73us; 105us; 76us; 105us; 83us; 105us; 106us; 105us; 109us; 105us; 112us; 105us; 114us; 105us; 150us; 105us; 151us; 105us; 152us; 105us; 153us; 105us; 154us; 105us; 155us; 105us; 156us; 105us; 157us; 105us; 158us; 105us; 159us; 105us; 160us; 105us; 161us; 105us; 162us; 105us; 169us; 105us; 170us; 105us; 171us; 105us; 172us; 105us; 173us; 105us; 174us; 105us; 175us; 105us; 176us; 105us; 177us; 105us; 178us; 105us; 179us; 105us; 180us; 105us; 182us; 105us; 183us; 105us; 186us; 105us; 187us; 105us; 190us; 105us; 193us; 105us; 201us; 203us; 204us; 105us; 207us; 105us; 57us; 65535us; 37us; 102us; 40us; 102us; 43us; 102us; 50us; 102us; 56us; 102us; 58us; 102us; 59us; 102us; 62us; 102us; 64us; 102us; 67us; 102us; 69us; 102us; 71us; 102us; 73us; 102us; 76us; 102us; 83us; 102us; 106us; 102us; 109us; 102us; 112us; 102us; 114us; 102us; 150us; 102us; 151us; 102us; 152us; 102us; 153us; 102us; 154us; 102us; 155us; 102us; 156us; 102us; 157us; 102us; 158us; 102us; 159us; 102us; 160us; 102us; 161us; 102us; 162us; 102us; 165us; 166us; 167us; 168us; 169us; 102us; 170us; 102us; 171us; 102us; 172us; 102us; 173us; 102us; 174us; 102us; 175us; 102us; 176us; 102us; 177us; 102us; 178us; 102us; 179us; 102us; 180us; 102us; 182us; 102us; 183us; 102us; 186us; 102us; 187us; 102us; 190us; 102us; 193us; 101us; 195us; 196us; 198us; 199us; 201us; 202us; 204us; 102us; 207us; 102us; 1us; 65535us; 109us; 110us; 2us; 65535us; 109us; 206us; 207us; 208us; 53us; 65535us; 37us; 192us; 40us; 192us; 43us; 192us; 50us; 192us; 56us; 192us; 58us; 192us; 59us; 192us; 62us; 192us; 64us; 192us; 67us; 192us; 69us; 192us; 71us; 192us; 73us; 192us; 76us; 192us; 83us; 192us; 106us; 192us; 109us; 192us; 112us; 192us; 114us; 192us; 150us; 192us; 151us; 192us; 152us; 192us; 153us; 192us; 154us; 192us; 155us; 192us; 156us; 192us; 157us; 192us; 158us; 192us; 159us; 192us; 160us; 192us; 161us; 192us; 162us; 192us; 169us; 192us; 170us; 192us; 171us; 192us; 172us; 192us; 173us; 192us; 174us; 192us; 175us; 192us; 176us; 192us; 177us; 192us; 178us; 192us; 179us; 192us; 180us; 192us; 182us; 192us; 183us; 192us; 186us; 192us; 187us; 192us; 190us; 192us; 193us; 192us; 201us; 192us; 204us; 192us; 207us; 192us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 45us; 49us; 54us; 63us; 66us; 69us; 78us; 131us; 184us; 238us; 296us; 298us; 301us; 355us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 36us; 1us; 23us; 20us; 24us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 20us; 26us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 26us; 1us; 27us; 3us; 28us; 36us; 37us; 3us; 28us; 36us; 37us; 22us; 28us; 36us; 37us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 3us; 28us; 36us; 37us; 2us; 28us; 36us; 1us; 28us; 2us; 29us; 38us; 2us; 29us; 38us; 21us; 29us; 38us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 2us; 29us; 38us; 1us; 29us; 2us; 30us; 39us; 2us; 30us; 39us; 21us; 30us; 39us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 2us; 30us; 39us; 21us; 30us; 39us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 2us; 30us; 39us; 21us; 30us; 39us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 2us; 30us; 39us; 1us; 30us; 4us; 31us; 32us; 40us; 41us; 4us; 31us; 32us; 40us; 41us; 23us; 31us; 32us; 40us; 41us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 4us; 31us; 32us; 40us; 41us; 4us; 31us; 32us; 40us; 41us; 4us; 31us; 32us; 40us; 41us; 2us; 31us; 40us; 2us; 32us; 41us; 2us; 32us; 41us; 1us; 32us; 1us; 32us; 1us; 32us; 2us; 33us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 41us; 1us; 41us; 1us; 41us; 10us; 42us; 45us; 63us; 64us; 67us; 68us; 69us; 70us; 85us; 88us; 9us; 42us; 45us; 63us; 64us; 67us; 68us; 69us; 70us; 88us; 1us; 43us; 2us; 43us; 82us; 1us; 44us; 1us; 45us; 20us; 45us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 2us; 46us; 84us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 47us; 20us; 47us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 48us; 20us; 48us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 49us; 20us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 67us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 68us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 69us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 75us; 76us; 19us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 76us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 78us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 78us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 79us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 79us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 80us; 20us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 88us; 21us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 71us; 72us; 73us; 74us; 75us; 76us; 91us; 92us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 2us; 65us; 88us; 1us; 66us; 2us; 66us; 88us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 80us; 1us; 81us; 2us; 82us; 85us; 1us; 82us; 1us; 83us; 2us; 83us; 88us; 1us; 84us; 1us; 85us; 2us; 85us; 88us; 1us; 85us; 2us; 86us; 87us; 2us; 86us; 88us; 1us; 87us; 1us; 88us; 1us; 88us; 1us; 90us; 1us; 92us; 1us; 92us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 95us; 1us; 96us; 1us; 97us; 1us; 98us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 129us; 131us; 134us; 136us; 157us; 159us; 161us; 165us; 169us; 192us; 196us; 199us; 201us; 204us; 207us; 229us; 232us; 234us; 237us; 240us; 262us; 265us; 287us; 290us; 312us; 315us; 317us; 322us; 327us; 351us; 356us; 361us; 366us; 369us; 372us; 375us; 377us; 379us; 381us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 406us; 408us; 410us; 421us; 431us; 433us; 436us; 438us; 440us; 461us; 464us; 466us; 468us; 470us; 472us; 493us; 495us; 516us; 518us; 539us; 560us; 581us; 602us; 623us; 644us; 665us; 686us; 707us; 728us; 749us; 770us; 791us; 812us; 833us; 854us; 875us; 896us; 917us; 938us; 959us; 980us; 1001us; 1021us; 1042us; 1063us; 1084us; 1105us; 1126us; 1147us; 1168us; 1189us; 1211us; 1213us; 1215us; 1217us; 1219us; 1221us; 1223us; 1225us; 1227us; 1229us; 1231us; 1233us; 1235us; 1237us; 1239us; 1241us; 1243us; 1246us; 1248us; 1251us; 1253us; 1255us; 1257us; 1259us; 1261us; 1263us; 1265us; 1267us; 1269us; 1271us; 1273us; 1275us; 1277us; 1279us; 1281us; 1283us; 1285us; 1287us; 1289us; 1291us; 1293us; 1295us; 1297us; 1299us; 1302us; 1304us; 1306us; 1309us; 1311us; 1313us; 1316us; 1318us; 1321us; 1324us; 1326us; 1328us; 1330us; 1332us; 1334us; 1336us; 1338us; 1340us; 1342us; 1344us; 1346us; 1348us; |]
let _fsyacc_action_rows = 216
let _fsyacc_actionTableElements = [|3us; 16386us; 39us; 215us; 42us; 214us; 47us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 16386us; 39us; 215us; 42us; 214us; 47us; 23us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 30us; 14us; 57us; 12us; 3us; 32768us; 1us; 16us; 30us; 14us; 57us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 30us; 14us; 57us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 30us; 14us; 57us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 58us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 57us; 24us; 1us; 32768us; 1us; 25us; 2us; 16398us; 39us; 215us; 42us; 214us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 2us; 16398us; 39us; 215us; 42us; 214us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 2us; 32768us; 39us; 215us; 42us; 214us; 0us; 16401us; 25us; 16403us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 39us; 215us; 41us; 55us; 42us; 214us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 1us; 32768us; 4us; 39us; 0us; 16402us; 25us; 16403us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 39us; 215us; 41us; 55us; 42us; 214us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16404us; 1us; 32768us; 7us; 43us; 25us; 16403us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 39us; 215us; 41us; 55us; 42us; 214us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 40us; 59us; 0us; 16407us; 20us; 32768us; 7us; 49us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 0us; 16408us; 18us; 32768us; 1us; 193us; 7us; 51us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16409us; 20us; 32768us; 7us; 53us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 56us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 20us; 32768us; 2us; 58us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 23us; 32768us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 41us; 55us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 23us; 32768us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 41us; 55us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16412us; 1us; 32768us; 1us; 62us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 20us; 32768us; 2us; 64us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 23us; 32768us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 41us; 55us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16413us; 1us; 32768us; 1us; 67us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 20us; 32768us; 7us; 69us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 20us; 32768us; 7us; 71us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 20us; 32768us; 2us; 73us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 23us; 32768us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 41us; 55us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16414us; 1us; 32768us; 1us; 76us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 20us; 32768us; 2us; 78us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 1us; 32768us; 3us; 79us; 1us; 32768us; 51us; 89us; 2us; 32768us; 4us; 81us; 52us; 82us; 0us; 16415us; 1us; 32768us; 11us; 83us; 23us; 32768us; 1us; 193us; 3us; 37us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 41us; 55us; 43us; 213us; 44us; 114us; 45us; 116us; 46us; 50us; 48us; 61us; 49us; 66us; 50us; 75us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 1us; 32768us; 7us; 85us; 1us; 32768us; 4us; 86us; 0us; 16416us; 1us; 16417us; 51us; 89us; 0us; 16418us; 1us; 32768us; 58us; 90us; 1us; 32768us; 11us; 91us; 1us; 32768us; 3us; 37us; 1us; 32768us; 7us; 93us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 1us; 32768us; 7us; 99us; 1us; 32768us; 4us; 100us; 0us; 16425us; 9us; 16426us; 2us; 200us; 5us; 204us; 9us; 106us; 33us; 163us; 34us; 164us; 35us; 169us; 36us; 170us; 37us; 171us; 38us; 172us; 8us; 16426us; 5us; 204us; 9us; 106us; 33us; 163us; 34us; 164us; 35us; 169us; 36us; 170us; 37us; 171us; 38us; 172us; 0us; 16427us; 1us; 16427us; 2us; 194us; 0us; 16428us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 19us; 16429us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 1us; 16468us; 1us; 109us; 17us; 16473us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 1us; 32768us; 2us; 111us; 0us; 16430us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 1us; 16431us; 10us; 175us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 19us; 16432us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 0us; 16433us; 4us; 16434us; 10us; 175us; 30us; 152us; 31us; 153us; 32us; 154us; 4us; 16435us; 10us; 175us; 30us; 152us; 31us; 153us; 32us; 154us; 1us; 16436us; 10us; 175us; 1us; 16437us; 10us; 175us; 1us; 16438us; 10us; 175us; 12us; 16439us; 10us; 175us; 16us; 178us; 17us; 179us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 12us; 16440us; 10us; 175us; 16us; 178us; 17us; 179us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 12us; 16441us; 10us; 175us; 16us; 178us; 17us; 179us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 12us; 16442us; 10us; 175us; 16us; 178us; 17us; 179us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 12us; 16443us; 10us; 175us; 16us; 178us; 17us; 179us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 12us; 16444us; 10us; 175us; 16us; 178us; 17us; 179us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 16us; 16445us; 10us; 175us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 17us; 16446us; 10us; 175us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 19us; 16451us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 19us; 16452us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 19us; 16453us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 19us; 16454us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 20us; 32768us; 10us; 175us; 11us; 174us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 19us; 16455us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 1us; 16456us; 10us; 175us; 14us; 16457us; 10us; 175us; 16us; 178us; 17us; 179us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 14us; 16458us; 10us; 175us; 16us; 178us; 17us; 179us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 6us; 16459us; 10us; 175us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 19us; 32768us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 6us; 16460us; 10us; 175us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 1us; 16461us; 10us; 175us; 20us; 32768us; 8us; 183us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 20us; 32768us; 2us; 184us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 20us; 32768us; 8us; 187us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 20us; 32768us; 2us; 188us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 20us; 32768us; 2us; 191us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 20us; 32768us; 6us; 205us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 20us; 16475us; 8us; 207us; 10us; 175us; 12us; 173us; 14us; 176us; 15us; 177us; 16us; 178us; 17us; 179us; 20us; 162us; 21us; 161us; 22us; 155us; 23us; 156us; 24us; 157us; 25us; 158us; 26us; 159us; 27us; 160us; 28us; 150us; 29us; 151us; 30us; 152us; 31us; 153us; 32us; 154us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16447us; 0us; 16448us; 3us; 32768us; 1us; 198us; 30us; 201us; 57us; 197us; 1us; 16449us; 5us; 204us; 3us; 32768us; 1us; 198us; 30us; 201us; 57us; 197us; 1us; 16450us; 5us; 204us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 1us; 32768us; 1us; 182us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16462us; 1us; 32768us; 1us; 186us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16463us; 1us; 32768us; 1us; 190us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16464us; 0us; 16465us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16466us; 3us; 32768us; 1us; 198us; 30us; 201us; 57us; 197us; 1us; 16467us; 5us; 204us; 0us; 16468us; 3us; 32768us; 1us; 198us; 30us; 201us; 57us; 197us; 2us; 32768us; 2us; 200us; 5us; 204us; 0us; 16469us; 8us; 32768us; 1us; 193us; 10us; 195us; 29us; 211us; 30us; 201us; 43us; 213us; 57us; 197us; 58us; 209us; 59us; 210us; 1us; 16470us; 5us; 204us; 0us; 16471us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16472us; 0us; 16474us; 17us; 32768us; 1us; 193us; 10us; 195us; 18us; 180us; 19us; 112us; 29us; 211us; 30us; 201us; 33us; 165us; 34us; 167us; 43us; 213us; 44us; 114us; 45us; 116us; 53us; 181us; 54us; 185us; 55us; 189us; 57us; 108us; 58us; 209us; 59us; 210us; 0us; 16476us; 0us; 16477us; 0us; 16478us; 1us; 32768us; 58us; 212us; 0us; 16479us; 0us; 16480us; 0us; 16481us; 0us; 16482us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 104us; 106us; 107us; 133us; 134us; 136us; 162us; 163us; 164us; 166us; 167us; 188us; 189us; 208us; 209us; 230us; 231us; 232us; 234us; 252us; 273us; 297us; 321us; 322us; 324us; 342us; 363us; 387us; 388us; 390us; 408us; 429us; 447us; 468us; 486us; 507us; 531us; 532us; 534us; 552us; 573us; 575us; 577us; 580us; 581us; 583us; 607us; 609us; 611us; 612us; 614us; 615us; 617us; 619us; 621us; 623us; 624us; 625us; 626us; 627us; 628us; 630us; 632us; 633us; 643us; 652us; 653us; 655us; 656us; 674us; 694us; 696us; 714us; 716us; 717us; 735us; 737us; 755us; 775us; 776us; 781us; 786us; 788us; 790us; 792us; 805us; 818us; 831us; 844us; 857us; 870us; 887us; 905us; 925us; 945us; 965us; 985us; 1006us; 1026us; 1028us; 1043us; 1058us; 1065us; 1085us; 1092us; 1094us; 1115us; 1136us; 1157us; 1178us; 1199us; 1220us; 1241us; 1259us; 1277us; 1295us; 1313us; 1331us; 1349us; 1367us; 1385us; 1403us; 1421us; 1439us; 1457us; 1475us; 1476us; 1477us; 1481us; 1483us; 1487us; 1489us; 1507us; 1525us; 1543us; 1561us; 1579us; 1597us; 1615us; 1633us; 1651us; 1669us; 1687us; 1705us; 1707us; 1725us; 1743us; 1744us; 1746us; 1764us; 1782us; 1783us; 1785us; 1803us; 1804us; 1805us; 1823us; 1824us; 1828us; 1830us; 1831us; 1835us; 1838us; 1839us; 1848us; 1850us; 1851us; 1869us; 1870us; 1871us; 1889us; 1890us; 1891us; 1892us; 1894us; 1895us; 1896us; 1897us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 9us; 7us; 11us; 1us; 2us; 5us; 7us; 5us; 5us; 9us; 7us; 11us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 2us; 6us; 6us; 4us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 23us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 16420us; 16421us; 16422us; 16423us; 65535us; 65535us; 16425us; 65535us; 65535us; 16427us; 65535us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 65535us; 16433us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16447us; 16448us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16462us; 65535us; 65535us; 65535us; 16463us; 65535us; 65535us; 16464us; 16465us; 65535us; 16466us; 65535us; 65535us; 16468us; 65535us; 65535us; 16469us; 65535us; 65535us; 16471us; 65535us; 16472us; 16474us; 65535us; 16476us; 16477us; 16478us; 65535us; 16479us; 16480us; 16481us; 16482us; |]
let _fsyacc_reductions ()  =    [| 
# 552 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 561 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "CPar.fsy"
                                                               Prog _1 
                   )
# 48 "CPar.fsy"
                 : Absyn.program));
# 572 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CPar.fsy"
                                                               [] 
                   )
# 52 "CPar.fsy"
                 : 'Topdecs));
# 582 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 53 "CPar.fsy"
                 : 'Topdecs));
# 594 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 57 "CPar.fsy"
                 : 'Topdec));
# 605 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "CPar.fsy"
                                                               _1 
                   )
# 58 "CPar.fsy"
                 : 'Topdec));
# 616 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 62 "CPar.fsy"
                 : 'Vardec));
# 628 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 66 "CPar.fsy"
                 : 'Vardesc));
# 639 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 67 "CPar.fsy"
                 : 'Vardesc));
# 650 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CPar.fsy"
                                                               _2                                      
                   )
# 68 "CPar.fsy"
                 : 'Vardesc));
# 661 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 69 "CPar.fsy"
                 : 'Vardesc));
# 672 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 70 "CPar.fsy"
                 : 'Vardesc));
# 684 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 74 "CPar.fsy"
                 : 'Fundec));
# 697 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 75 "CPar.fsy"
                 : 'Fundec));
# 711 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CPar.fsy"
                                                               [] 
                   )
# 79 "CPar.fsy"
                 : 'Paramdecs));
# 721 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CPar.fsy"
                                                               _1 
                   )
# 80 "CPar.fsy"
                 : 'Paramdecs));
# 732 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CPar.fsy"
                                                               [_1]     
                   )
# 84 "CPar.fsy"
                 : 'Paramdecs1));
# 743 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 85 "CPar.fsy"
                 : 'Paramdecs1));
# 755 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CPar.fsy"
                                                               Block _2 
                   )
# 89 "CPar.fsy"
                 : 'Block));
# 766 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CPar.fsy"
                                                               [] 
                   )
# 93 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 776 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 94 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 788 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 95 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 800 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CPar.fsy"
                                                               _1 
                   )
# 99 "CPar.fsy"
                 : 'Stmt));
# 811 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CPar.fsy"
                                                               _1 
                   )
# 100 "CPar.fsy"
                 : 'Stmt));
# 822 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 104 "CPar.fsy"
                 : 'StmtM));
# 833 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                               Return None          
                   )
# 105 "CPar.fsy"
                 : 'StmtM));
# 843 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 106 "CPar.fsy"
                 : 'StmtM));
# 854 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                               _1                   
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 865 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 108 "CPar.fsy"
                 : 'StmtM));
# 878 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 109 "CPar.fsy"
                 : 'StmtM));
# 890 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                                                         For(_3, _5, _7, _9) 
                   )
# 110 "CPar.fsy"
                 : 'StmtM));
# 904 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Caselist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CPar.fsy"
                                                                        Switch(_3, _6)   
                   )
# 111 "CPar.fsy"
                 : 'StmtM));
# 916 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Caselist)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                                                                 Switch2(_3, _6, _9)   
                   )
# 112 "CPar.fsy"
                 : 'StmtM));
# 929 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Casedec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "CPar.fsy"
                                                                 [_1] 
                   )
# 116 "CPar.fsy"
                 : 'Caselist));
# 940 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Casedec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Caselist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "CPar.fsy"
                                                                 _1 :: _2 
                   )
# 117 "CPar.fsy"
                 : 'Caselist));
# 952 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "CPar.fsy"
                                                                   (_2, _4) 
                   )
# 121 "CPar.fsy"
                 : 'Casedec));
# 964 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 125 "CPar.fsy"
                 : 'StmtU));
# 977 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 126 "CPar.fsy"
                 : 'StmtU));
# 989 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 127 "CPar.fsy"
                 : 'StmtU));
# 1001 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                                         For(_3, _5, _7, _9) 
                   )
# 128 "CPar.fsy"
                 : 'StmtU));
# 1015 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Caselist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                                        Switch(_3, _6)   
                   )
# 129 "CPar.fsy"
                 : 'StmtU));
# 1027 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Caselist)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                                                                 Switch2(_3, _6, _9)   
                   )
# 130 "CPar.fsy"
                 : 'StmtU));
# 1040 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Access _1           
                   )
# 134 "CPar.fsy"
                 : 'Expr));
# 1051 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               _1                  
                   )
# 135 "CPar.fsy"
                 : 'Expr));
# 1062 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               _1                  
                   )
# 139 "CPar.fsy"
                 : 'ExprNotAccess));
# 1073 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 140 "CPar.fsy"
                 : 'ExprNotAccess));
# 1085 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 141 "CPar.fsy"
                 : 'ExprNotAccess));
# 1097 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 142 "CPar.fsy"
                 : 'ExprNotAccess));
# 1108 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1119 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1129 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1141 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1153 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1165 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1177 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1189 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1201 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 151 "CPar.fsy"
                 : 'ExprNotAccess));
# 1213 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 152 "CPar.fsy"
                 : 'ExprNotAccess));
# 1225 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 153 "CPar.fsy"
                 : 'ExprNotAccess));
# 1237 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 154 "CPar.fsy"
                 : 'ExprNotAccess));
# 1249 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 155 "CPar.fsy"
                 : 'ExprNotAccess));
# 1261 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 156 "CPar.fsy"
                 : 'ExprNotAccess));
# 1273 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 157 "CPar.fsy"
                 : 'ExprNotAccess));
# 1285 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "CPar.fsy"
                                                               Doplus(_1)          
                   )
# 158 "CPar.fsy"
                 : 'ExprNotAccess));
# 1296 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "CPar.fsy"
                                                               Dominus(_1)         
                   )
# 159 "CPar.fsy"
                 : 'ExprNotAccess));
# 1307 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               PreDoplus(_2)       
                   )
# 160 "CPar.fsy"
                 : 'ExprNotAccess));
# 1318 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               PreDominus(_2)      
                   )
# 161 "CPar.fsy"
                 : 'ExprNotAccess));
# 1329 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               PlusAssign(_1, _3)  
                   )
# 162 "CPar.fsy"
                 : 'ExprNotAccess));
# 1341 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "CPar.fsy"
                                                               MinusAssign(_1, _3) 
                   )
# 163 "CPar.fsy"
                 : 'ExprNotAccess));
# 1353 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "CPar.fsy"
                                                               MultiAssign(_1, _3) 
                   )
# 164 "CPar.fsy"
                 : 'ExprNotAccess));
# 1365 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               DivideAssign(_1, _3)
                   )
# 165 "CPar.fsy"
                 : 'ExprNotAccess));
# 1377 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               Question(_1, _3, _5)
                   )
# 166 "CPar.fsy"
                 : 'ExprNotAccess));
# 1390 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               Bitand(_1, _3)      
                   )
# 167 "CPar.fsy"
                 : 'ExprNotAccess));
# 1402 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               Bitor(_1, _3)       
                   )
# 168 "CPar.fsy"
                 : 'ExprNotAccess));
# 1414 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "CPar.fsy"
                                                               Bitxor(_1, _3)      
                   )
# 169 "CPar.fsy"
                 : 'ExprNotAccess));
# 1426 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               Bitleft(_1, _3)     
                   )
# 170 "CPar.fsy"
                 : 'ExprNotAccess));
# 1438 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "CPar.fsy"
                                                               Bitright(_1, _3)    
                   )
# 171 "CPar.fsy"
                 : 'ExprNotAccess));
# 1450 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CPar.fsy"
                                                               Bitnot("~", _2)     
                   )
# 172 "CPar.fsy"
                 : 'ExprNotAccess));
# 1461 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               Max(_3, _5)         
                   )
# 173 "CPar.fsy"
                 : 'ExprNotAccess));
# 1473 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               Min(_3, _5)         
                   )
# 174 "CPar.fsy"
                 : 'ExprNotAccess));
# 1485 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "CPar.fsy"
                                                               Abs(_3)             
                   )
# 175 "CPar.fsy"
                 : 'ExprNotAccess));
# 1496 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               CstI _1             
                   )
# 179 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1507 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "CPar.fsy"
                                                               _2                  
                   )
# 180 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1518 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "CPar.fsy"
                                                               Addr _2             
                   )
# 181 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1529 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "CPar.fsy"
                                                               AccVar _1           
                   )
# 185 "CPar.fsy"
                 : 'Access));
# 1540 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "CPar.fsy"
                                                               _2                  
                   )
# 186 "CPar.fsy"
                 : 'Access));
# 1551 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 187 "CPar.fsy"
                 : 'Access));
# 1562 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 188 "CPar.fsy"
                 : 'Access));
# 1573 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 189 "CPar.fsy"
                 : 'Access));
# 1585 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "CPar.fsy"
                                                               []       
                   )
# 193 "CPar.fsy"
                 : 'Exprs));
# 1595 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "CPar.fsy"
                                                               _1       
                   )
# 194 "CPar.fsy"
                 : 'Exprs));
# 1606 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "CPar.fsy"
                                                               [_1]     
                   )
# 198 "CPar.fsy"
                 : 'Exprs1));
# 1617 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 199 "CPar.fsy"
                 : 'Exprs1));
# 1629 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "CPar.fsy"
                                                               _1       
                   )
# 203 "CPar.fsy"
                 : 'Const));
# 1640 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "CPar.fsy"
                                                               _1       
                   )
# 204 "CPar.fsy"
                 : 'Const));
# 1651 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "CPar.fsy"
                                                               - _2     
                   )
# 205 "CPar.fsy"
                 : 'Const));
# 1662 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "CPar.fsy"
                                                               -1       
                   )
# 206 "CPar.fsy"
                 : 'Const));
# 1672 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "CPar.fsy"
                                                               TypI     
                   )
# 210 "CPar.fsy"
                 : 'Type));
# 1682 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "CPar.fsy"
                                                               TypC     
                   )
# 211 "CPar.fsy"
                 : 'Type));
|]
# 1693 "CPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 63;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
